var documenterSearchIndex = {"docs":
[{"location":"index.html","page":"Home","title":"Home","text":"CurrentModule = AmbientForcing","category":"page"},{"location":"index.html#AmbientForcing","page":"Home","title":"AmbientForcing","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"A package that can calculate valid initial conditions for differential-algebraic equations (DAEs) in mass matrix form. The solutions of DAEs lie on constraint manifolds and not every state is valid anymore. Using the ambient forcing algorithm it is possible to calculate new valid states on the manifold. It can especially be useful when one wants to perturb single variables of a system. ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"This is, for example, needed when one wants to calculate the Single Node Basin of a power grid with loads. The package can be used with any ODEFunction in mass matrix form but it is especially useful in combination with NetworkDynamics.jl or PowerDynamics.jl.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"The paper which explains Ambient Forcing in depth is accessible under the DOI.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"AmbientForcing.jl is not fully published yet. In order to use it you have to manually add it from GitHub!","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"julia> ] add \"https://github.com/PIK-ICoNe/AmbientForcing.jl\"","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Pages = [\n    \"DifferentialEquation_example.md\",\n    \"NetworkDynamics_example.md\",\n    \"PowerDynamics_example.md\",\n]\nDepth = 1","category":"page"},{"location":"NetworkDynamics_example.html","page":"Network Dynamics Example","title":"Network Dynamics Example","text":"EditURL = \"<unknown>/examples/NetworkDynamics_example.jl\"","category":"page"},{"location":"NetworkDynamics_example.html","page":"Network Dynamics Example","title":"Network Dynamics Example","text":"using AmbientForcing\nusing NetworkDynamics, Distributions\nusing Graphs\nusing OrdinaryDiffEq","category":"page"},{"location":"NetworkDynamics_example.html","page":"Network Dynamics Example","title":"Network Dynamics Example","text":"This is an example from NetworkDynamics https://github.com/PIK-ICoN/NetworkDynamics.jl/blob/master/examples/kuramoto_plasticity.jl This only works with NetworkDynamics v0.5.0 or newer","category":"page"},{"location":"NetworkDynamics_example.html","page":"Network Dynamics Example","title":"Network Dynamics Example","text":"Further examples can be found in the test folder","category":"page"},{"location":"NetworkDynamics_example.html","page":"Network Dynamics Example","title":"Network Dynamics Example","text":"const N_plastic = 10 # number of nodes\nk = 4  # average degree\ng = barabasi_albert(N_plastic, k)","category":"page"},{"location":"NetworkDynamics_example.html","page":"Network Dynamics Example","title":"Network Dynamics Example","text":"Berner, Rico, Eckehard Schöll, and Serhiy Yanchuk.   \"Multiclusters in Networks of Adaptively Coupled Phase Oscillators.\"   SIAM Journal on Applied Dynamical Systems 18.4 (2019): 2227-2266.","category":"page"},{"location":"NetworkDynamics_example.html","page":"Network Dynamics Example","title":"Network Dynamics Example","text":"The coupling function is modeled by a differential algebraic equation with mass matrix 0 * de[1] = e[2] * sin(vs[1] - vd[1] + α) / N - e[1] is equivalent to e[1] = e[2] * sin(vs[1] - vd[1] + α) / N","category":"page"},{"location":"NetworkDynamics_example.html","page":"Network Dynamics Example","title":"Network Dynamics Example","text":"function kuramoto_plastic_edge!(de, e, v_s, v_d, p, t)\n    de[1] =  e[2] * sin(v_s[1] - v_d[1] + α) / N_plastic - e[1]\n    de[2] = - ϵ * (sin(v_s[1] - v_d[1] + β) + e[2])\n\n    nothing\nend\n\nfunction kuramoto_plastic_vertex!(dv, v, edges, p, t)\n    dv .= 0\n    for e in edges\n        dv .-= e[1]\n    end\nend","category":"page"},{"location":"NetworkDynamics_example.html","page":"Network Dynamics Example","title":"Network Dynamics Example","text":"Global parameters need to be const for type stability","category":"page"},{"location":"NetworkDynamics_example.html","page":"Network Dynamics Example","title":"Network Dynamics Example","text":"const ϵ = 0.1\nconst α = .2π\nconst β = -.95π","category":"page"},{"location":"NetworkDynamics_example.html","page":"Network Dynamics Example","title":"Network Dynamics Example","text":"NetworkDynamics Setup","category":"page"},{"location":"NetworkDynamics_example.html","page":"Network Dynamics Example","title":"Network Dynamics Example","text":"plasticvertex = ODEVertex(f = kuramoto_plastic_vertex!, dim =1)\nmass_matrix_plasticedge = zeros(2,2)\nmass_matrix_plasticedge[2,2] = 1. # First variables is set to 0\n\nplasticedge = ODEEdge(f = kuramoto_plastic_edge!, dim=2, sym=[:e, :de], coupling=:undirected,mass_matrix = mass_matrix_plasticedge);\nkuramoto_plastic! = network_dynamics(plasticvertex, plasticedge, g)","category":"page"},{"location":"NetworkDynamics_example.html","page":"Network Dynamics Example","title":"Network Dynamics Example","text":"Ambient Forcing starts here","category":"page"},{"location":"NetworkDynamics_example.html","page":"Network Dynamics Example","title":"Network Dynamics Example","text":"Using a random initial condition x0 violates the constraints! The constraints are fulfilled when g(x) ≈ 0.","category":"page"},{"location":"NetworkDynamics_example.html","page":"Network Dynamics Example","title":"Network Dynamics Example","text":"x0_plastic = rand(106)\ng_nd = constraint_equations(kuramoto_plastic!)\nsum(g_nd(x0_plastic))","category":"page"},{"location":"NetworkDynamics_example.html","page":"Network Dynamics Example","title":"Network Dynamics Example","text":"Using zeros as the initial conditions for the ambient forcing algo","category":"page"},{"location":"NetworkDynamics_example.html","page":"Network Dynamics Example","title":"Network Dynamics Example","text":"x0_plastic = zeros(106)\ng_nd = constraint_equations(kuramoto_plastic!)\ng_nd(x0_plastic)","category":"page"},{"location":"NetworkDynamics_example.html","page":"Network Dynamics Example","title":"Network Dynamics Example","text":"Perturbing all variables at once","category":"page"},{"location":"NetworkDynamics_example.html","page":"Network Dynamics Example","title":"Network Dynamics Example","text":"Frand = random_force(kuramoto_plastic!, [0.0, 1.0], Uniform)\nafoprob = ambient_forcing_problem(kuramoto_plastic!, x0_plastic, 2.0, Frand)\nz_new = ambient_forcing(afoprob, x0_plastic, 2.0, Frand)","category":"page"},{"location":"NetworkDynamics_example.html","page":"Network Dynamics Example","title":"Network Dynamics Example","text":"As we can see the constraints are not violated!","category":"page"},{"location":"NetworkDynamics_example.html","page":"Network Dynamics Example","title":"Network Dynamics Example","text":"sum(g_nd(z_new))","category":"page"},{"location":"NetworkDynamics_example.html","page":"Network Dynamics Example","title":"Network Dynamics Example","text":"Perturbing only the variables e22 and de22","category":"page"},{"location":"NetworkDynamics_example.html","page":"Network Dynamics Example","title":"Network Dynamics Example","text":"idx = idx_exclusive(kuramoto_plastic!, [\"e_22\", \"de_22\"])\nFrand = random_force(kuramoto_plastic!, [0.0, 1.0], Uniform, idx)\nz_new = ambient_forcing(afoprob, x0_plastic, 2.0, Frand)","category":"page"},{"location":"NetworkDynamics_example.html","page":"Network Dynamics Example","title":"Network Dynamics Example","text":"Still the constraints are fulfilled!","category":"page"},{"location":"NetworkDynamics_example.html","page":"Network Dynamics Example","title":"Network Dynamics Example","text":"sum(g_nd(z_new))","category":"page"},{"location":"NetworkDynamics_example.html","page":"Network Dynamics Example","title":"Network Dynamics Example","text":"","category":"page"},{"location":"NetworkDynamics_example.html","page":"Network Dynamics Example","title":"Network Dynamics Example","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/NetworkDynamics_example.html","page":"-","title":"-","text":"EditURL = \"https://github.com/PIK-ICoNe/AmbientForcing.jl/blob/main/examples/NetworkDynamics_example.jl\"","category":"page"},{"location":"generated/NetworkDynamics_example.html","page":"-","title":"-","text":"using AmbientForcing\nusing NetworkDynamics, Distributions\nusing Graphs\nusing OrdinaryDiffEq","category":"page"},{"location":"generated/NetworkDynamics_example.html","page":"-","title":"-","text":"This is an example from NetworkDynamics https://github.com/PIK-ICoN/NetworkDynamics.jl/blob/master/examples/kuramoto_plasticity.jl This only works with NetworkDynamics v0.5.0 or newer","category":"page"},{"location":"generated/NetworkDynamics_example.html","page":"-","title":"-","text":"Further examples can be found in the test folder","category":"page"},{"location":"generated/NetworkDynamics_example.html","page":"-","title":"-","text":"const N_plastic = 10 # number of nodes\nk = 4  # average degree\ng = barabasi_albert(N_plastic, k)","category":"page"},{"location":"generated/NetworkDynamics_example.html","page":"-","title":"-","text":"Berner, Rico, Eckehard Schöll, and Serhiy Yanchuk.   \"Multiclusters in Networks of Adaptively Coupled Phase Oscillators.\"   SIAM Journal on Applied Dynamical Systems 18.4 (2019): 2227-2266.","category":"page"},{"location":"generated/NetworkDynamics_example.html","page":"-","title":"-","text":"The coupling function is modeled by a differential algebraic equation with mass matrix 0 * de[1] = e[2] * sin(vs[1] - vd[1] + α) / N - e[1] is equivalent to e[1] = e[2] * sin(vs[1] - vd[1] + α) / N","category":"page"},{"location":"generated/NetworkDynamics_example.html","page":"-","title":"-","text":"function kuramoto_plastic_edge!(de, e, v_s, v_d, p, t)\n    de[1] =  e[2] * sin(v_s[1] - v_d[1] + α) / N_plastic - e[1]\n    de[2] = - ϵ * (sin(v_s[1] - v_d[1] + β) + e[2])\n\n    nothing\nend\n\nfunction kuramoto_plastic_vertex!(dv, v, edges, p, t)\n    dv .= 0\n    for e in edges\n        dv .-= e[1]\n    end\nend","category":"page"},{"location":"generated/NetworkDynamics_example.html","page":"-","title":"-","text":"Global parameters need to be const for type stability","category":"page"},{"location":"generated/NetworkDynamics_example.html","page":"-","title":"-","text":"const ϵ = 0.1\nconst α = .2π\nconst β = -.95π","category":"page"},{"location":"generated/NetworkDynamics_example.html","page":"-","title":"-","text":"NetworkDynamics Setup","category":"page"},{"location":"generated/NetworkDynamics_example.html","page":"-","title":"-","text":"plasticvertex = ODEVertex(f = kuramoto_plastic_vertex!, dim =1)\nmass_matrix_plasticedge = zeros(2,2)\nmass_matrix_plasticedge[2,2] = 1. # First variables is set to 0\n\nplasticedge = ODEEdge(f = kuramoto_plastic_edge!, dim=2, sym=[:e, :de], coupling=:undirected,mass_matrix = mass_matrix_plasticedge);\nkuramoto_plastic! = network_dynamics(plasticvertex, plasticedge, g)","category":"page"},{"location":"generated/NetworkDynamics_example.html","page":"-","title":"-","text":"Ambient Forcing starts here","category":"page"},{"location":"generated/NetworkDynamics_example.html","page":"-","title":"-","text":"Using a random initial condition x0 violates the constraints! The constraints are fulfilled when g(x) ≈ 0.","category":"page"},{"location":"generated/NetworkDynamics_example.html","page":"-","title":"-","text":"x0_plastic = rand(106)\ng_nd = constraint_equations(kuramoto_plastic!)\nsum(g_nd(x0_plastic))","category":"page"},{"location":"generated/NetworkDynamics_example.html","page":"-","title":"-","text":"Using zeros as the initial conditions for the ambient forcing algo","category":"page"},{"location":"generated/NetworkDynamics_example.html","page":"-","title":"-","text":"x0_plastic = zeros(106)\ng_nd = constraint_equations(kuramoto_plastic!)\ng_nd(x0_plastic)","category":"page"},{"location":"generated/NetworkDynamics_example.html","page":"-","title":"-","text":"Perturbing all variables at once","category":"page"},{"location":"generated/NetworkDynamics_example.html","page":"-","title":"-","text":"Frand = random_force(kuramoto_plastic!, [0.0, 1.0], Uniform)\nafoprob = ambient_forcing_problem(kuramoto_plastic!, x0_plastic, 2.0, Frand)\nz_new = ambient_forcing(afoprob, x0_plastic, 2.0, Frand)","category":"page"},{"location":"generated/NetworkDynamics_example.html","page":"-","title":"-","text":"As we can see the constraints are not violated!","category":"page"},{"location":"generated/NetworkDynamics_example.html","page":"-","title":"-","text":"sum(g_nd(z_new))","category":"page"},{"location":"generated/NetworkDynamics_example.html","page":"-","title":"-","text":"Perturbing only the variables e22 and de22","category":"page"},{"location":"generated/NetworkDynamics_example.html","page":"-","title":"-","text":"idx = idx_exclusive(kuramoto_plastic!, [\"e_22\", \"de_22\"])\nFrand = random_force(kuramoto_plastic!, [0.0, 1.0], Uniform, idx)\nz_new = ambient_forcing(afoprob, x0_plastic, 2.0, Frand)","category":"page"},{"location":"generated/NetworkDynamics_example.html","page":"-","title":"-","text":"Still the constraints are fulfilled!","category":"page"},{"location":"generated/NetworkDynamics_example.html","page":"-","title":"-","text":"sum(g_nd(z_new))","category":"page"},{"location":"generated/NetworkDynamics_example.html","page":"-","title":"-","text":"","category":"page"},{"location":"generated/NetworkDynamics_example.html","page":"-","title":"-","text":"This page was generated using Literate.jl.","category":"page"}]
}
