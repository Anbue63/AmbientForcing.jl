var documenterSearchIndex = {"docs":
[{"location":"power_dynamics/","page":"PowerDynamics.jl Example","title":"PowerDynamics.jl Example","text":"#PowerDynamics.jl Example This example shows the basic usage of the AmbientForcing and PowerDynamics.jl.","category":"page"},{"location":"power_dynamics/","page":"PowerDynamics.jl Example","title":"PowerDynamics.jl Example","text":"We begin with the Setup. First we include all necessary packages.","category":"page"},{"location":"power_dynamics/","page":"PowerDynamics.jl Example","title":"PowerDynamics.jl Example","text":"using AmbientForcing\nusing PowerDynamics, Distributions","category":"page"},{"location":"power_dynamics/","page":"PowerDynamics.jl Example","title":"PowerDynamics.jl Example","text":"Lets create a small test power grid with three nodes:","category":"page"},{"location":"power_dynamics/","page":"PowerDynamics.jl Example","title":"PowerDynamics.jl Example","text":"line_list = []\nappend!(line_list, [StaticLine(from=1, to=2, Y=-1im / 0.02 + 4)])\nappend!(line_list, [StaticLine(from=1, to=3, Y=-1im / 0.02 + 4)])","category":"page"},{"location":"power_dynamics/","page":"PowerDynamics.jl Example","title":"PowerDynamics.jl Example","text":"The PQAlgebraic Node is our constraint. The Power Output of node 3 is fixed.","category":"page"},{"location":"power_dynamics/","page":"PowerDynamics.jl Example","title":"PowerDynamics.jl Example","text":"node_list = []\nappend!(node_list, [SlackAlgebraic(U=1, Y_n=0)])\nappend!(node_list, [FourthOrderEq(H=3.318, P=-0.6337, D=0.1, Ω=50, E_f=0.5, T_d_dash=0.1, T_q_dash=8.690, X_d_dash=0.111, X_q_dash=0.103, X_d=0.1, X_q=0.6)])\nappend!(node_list, [PQAlgebraic(P=-0.6337, Q=0.0)])","category":"page"},{"location":"power_dynamics/","page":"PowerDynamics.jl Example","title":"PowerDynamics.jl Example","text":"We use the right hand side as our ODEFunction","category":"page"},{"location":"power_dynamics/","page":"PowerDynamics.jl Example","title":"PowerDynamics.jl Example","text":"pg = PowerGrid(node_list, line_list)\nrpg = rhs(pg)","category":"page"},{"location":"power_dynamics/","page":"PowerDynamics.jl Example","title":"PowerDynamics.jl Example","text":"We access the constraint equations g of the power grid:","category":"page"},{"location":"power_dynamics/","page":"PowerDynamics.jl Example","title":"PowerDynamics.jl Example","text":"g = constraint_equations(rpg)","category":"page"},{"location":"power_dynamics/","page":"PowerDynamics.jl Example","title":"PowerDynamics.jl Example","text":"The operation point is a fixed point and naturally lies on the manifold. Thus it can be used as the initial condition for AmbientForcing. We can easily find the operation point using PowerDynamics in-build function:","category":"page"},{"location":"power_dynamics/","page":"PowerDynamics.jl Example","title":"PowerDynamics.jl Example","text":"op = find_operationpoint(pg)","category":"page"},{"location":"power_dynamics/","page":"PowerDynamics.jl Example","title":"PowerDynamics.jl Example","text":"Lets check if g(op)  0, which means that the constraint is fulfilled.","category":"page"},{"location":"power_dynamics/","page":"PowerDynamics.jl Example","title":"PowerDynamics.jl Example","text":"isapprox(sum(g(op.vec)), 0.0, atol=1e-8)","category":"page"},{"location":"power_dynamics/","page":"PowerDynamics.jl Example","title":"PowerDynamics.jl Example","text":"","category":"page"},{"location":"power_dynamics/","page":"PowerDynamics.jl Example","title":"PowerDynamics.jl Example","text":"Lets generate a random vector from the ambient space. First we want to perturb all variables in the grid:","category":"page"},{"location":"power_dynamics/","page":"PowerDynamics.jl Example","title":"PowerDynamics.jl Example","text":"Frand = random_force(rpg, [0.0, 1], Uniform)\nafoprob = ambient_forcing_problem(rpg, op.vec, 2.0, Frand, method=:ForwardDiff)\nz_new_all = ambient_forcing(afoprob, op.vec, 2.0, Frand) # Our new valid initial condition\nisapprox(sum(g(z_new_all)), 0.0, atol=1e-8)","category":"page"},{"location":"power_dynamics/","page":"PowerDynamics.jl Example","title":"PowerDynamics.jl Example","text":"","category":"page"},{"location":"power_dynamics/","page":"PowerDynamics.jl Example","title":"PowerDynamics.jl Example","text":"Next: let's perturb just the voltage at node 3! We begin by getting the index of the real and imaginary part of the voltage:","category":"page"},{"location":"power_dynamics/","page":"PowerDynamics.jl Example","title":"PowerDynamics.jl Example","text":"idx = idx_exclusive(rpg, [\"u_r_3\", \"u_i_3\"])","category":"page"},{"location":"power_dynamics/","page":"PowerDynamics.jl Example","title":"PowerDynamics.jl Example","text":"Then we generate a vector only with non-vanishing components the voltage at node 3:","category":"page"},{"location":"power_dynamics/","page":"PowerDynamics.jl Example","title":"PowerDynamics.jl Example","text":"    Frand = random_force(rpg, [0.0, 1.0], Uniform, idx)\n    z_new_node_3 = ambient_forcing(afoprob, Frand)\n    isapprox(sum(g(z_new_node_3)), 0.0, atol=1e-8)","category":"page"},{"location":"power_dynamics/","page":"PowerDynamics.jl Example","title":"PowerDynamics.jl Example","text":"We see that the constraints are fulfilled.","category":"page"},{"location":"power_dynamics/","page":"PowerDynamics.jl Example","title":"PowerDynamics.jl Example","text":"","category":"page"},{"location":"power_dynamics/","page":"PowerDynamics.jl Example","title":"PowerDynamics.jl Example","text":"It is also possible to perturb the variable using different distributions. Typically SNBS the angle θ and ω are perturbed differently:","category":"page"},{"location":"power_dynamics/","page":"PowerDynamics.jl Example","title":"PowerDynamics.jl Example","text":"idx = idx_exclusive(rpg, [\"u_r_2\", \"u_i_2\", \"θ_2\", \"ω_2\"])\nτ = 2.0 # the integration time","category":"page"},{"location":"power_dynamics/","page":"PowerDynamics.jl Example","title":"PowerDynamics.jl Example","text":"When you want to sample the angle θ from a box of 0 2π. You have to make sure to dived the distribution argument by the integration time τ.","category":"page"},{"location":"power_dynamics/","page":"PowerDynamics.jl Example","title":"PowerDynamics.jl Example","text":"dist_vec = [[0, 1], [0, 2], [0, 2π] ./ τ, [-5, 5] ./ τ]\n\nFrand = random_force(rpg, dist_vec, Uniform, idx)\nz_new_node_2 = ambient_forcing(afoprob, op.vec, τ, Frand)\nisapprox(sum(g(z_new_node_2)), 0.0, atol=1e-8)","category":"page"},{"location":"power_dynamics/","page":"PowerDynamics.jl Example","title":"PowerDynamics.jl Example","text":"Still we find a valid initial condition!","category":"page"},{"location":"network_dynamics/","page":"NetworkDynamics.jl Example","title":"NetworkDynamics.jl Example","text":"#NetworkDynamics.jl Example","category":"page"},{"location":"network_dynamics/","page":"NetworkDynamics.jl Example","title":"NetworkDynamics.jl Example","text":"This example shows the basic usage of AmbientForcing.jl and NetworkDynamics.jl. It is adopted from the Network Dynamics Docs. This example only works with NetworkDynamics v0.5.0 or newer.","category":"page"},{"location":"network_dynamics/","page":"NetworkDynamics.jl Example","title":"NetworkDynamics.jl Example","text":"","category":"page"},{"location":"network_dynamics/","page":"NetworkDynamics.jl Example","title":"NetworkDynamics.jl Example","text":"We begin with the NetworkDynamics Setup. First we include all necessary packages.","category":"page"},{"location":"network_dynamics/","page":"NetworkDynamics.jl Example","title":"NetworkDynamics.jl Example","text":"using AmbientForcing\nusing NetworkDynamics, Distributions\nusing Graphs\nusing OrdinaryDiffEq","category":"page"},{"location":"network_dynamics/","page":"NetworkDynamics.jl Example","title":"NetworkDynamics.jl Example","text":"We generate a random graph with 10 nodes and an average degree of 4.","category":"page"},{"location":"network_dynamics/","page":"NetworkDynamics.jl Example","title":"NetworkDynamics.jl Example","text":"const N_plastic = 10 # number of nodes\nk = 4  # average degree\ng = barabasi_albert(N_plastic, k)","category":"page"},{"location":"network_dynamics/","page":"NetworkDynamics.jl Example","title":"NetworkDynamics.jl Example","text":"The coupling function is modeled by a differential algebraic equation with mass matrix:","category":"page"},{"location":"network_dynamics/","page":"NetworkDynamics.jl Example","title":"NetworkDynamics.jl Example","text":"0 cdot fracde_1dt = e_2 cdot fracsin(v_s1 - v_d1 + α)N - e_1","category":"page"},{"location":"network_dynamics/","page":"NetworkDynamics.jl Example","title":"NetworkDynamics.jl Example","text":"which is equivalent to: e_1 = e_2 cdot fracsin(v_s1 - v_d1 + α)N","category":"page"},{"location":"network_dynamics/","page":"NetworkDynamics.jl Example","title":"NetworkDynamics.jl Example","text":"This model comes from the following publication:  R. Berner et. al., \"Multiclusters in Networks of Adaptively Coupled Phase Oscillators.\" SIAM Journal on Applied Dynamical Systems 18.4 (2019): 2227-2266.","category":"page"},{"location":"network_dynamics/","page":"NetworkDynamics.jl Example","title":"NetworkDynamics.jl Example","text":"In NetworkDynamics.jl we define the edge dynamics as following:","category":"page"},{"location":"network_dynamics/","page":"NetworkDynamics.jl Example","title":"NetworkDynamics.jl Example","text":"function kuramoto_plastic_edge!(de, e, v_s, v_d, p, t)\n    de[1] =  e[2] * sin(v_s[1] - v_d[1] + α) / N_plastic - e[1]\n    de[2] = - ϵ * (sin(v_s[1] - v_d[1] + β) + e[2])\n\n    nothing\nend","category":"page"},{"location":"network_dynamics/","page":"NetworkDynamics.jl Example","title":"NetworkDynamics.jl Example","text":"and the node dynamics as:","category":"page"},{"location":"network_dynamics/","page":"NetworkDynamics.jl Example","title":"NetworkDynamics.jl Example","text":"function kuramoto_plastic_vertex!(dv, v, edges, p, t)\n    dv .= 0\n    for e in edges\n        dv .-= e[1]\n    end\nend","category":"page"},{"location":"network_dynamics/","page":"NetworkDynamics.jl Example","title":"NetworkDynamics.jl Example","text":"We define the following constants:","category":"page"},{"location":"network_dynamics/","page":"NetworkDynamics.jl Example","title":"NetworkDynamics.jl Example","text":"const ϵ = 0.1\nconst α = .2π\nconst β = -.95π","category":"page"},{"location":"network_dynamics/","page":"NetworkDynamics.jl Example","title":"NetworkDynamics.jl Example","text":"Then we generate a network dynamics problem:","category":"page"},{"location":"network_dynamics/","page":"NetworkDynamics.jl Example","title":"NetworkDynamics.jl Example","text":"plasticvertex = ODEVertex(f = kuramoto_plastic_vertex!, dim =1)\nmass_matrix_plasticedge = zeros(2,2)\nmass_matrix_plasticedge[2,2] = 1. # First variables is set to 0\n\nplasticedge = ODEEdge(f = kuramoto_plastic_edge!, dim=2, sym=[:e, :de], coupling=:undirected,mass_matrix = mass_matrix_plasticedge);\nkuramoto_plastic! = network_dynamics(plasticvertex, plasticedge, g)","category":"page"},{"location":"network_dynamics/","page":"NetworkDynamics.jl Example","title":"NetworkDynamics.jl Example","text":"","category":"page"},{"location":"network_dynamics/","page":"NetworkDynamics.jl Example","title":"NetworkDynamics.jl Example","text":"The Ambient Forcing part starts here!","category":"page"},{"location":"network_dynamics/","page":"NetworkDynamics.jl Example","title":"NetworkDynamics.jl Example","text":"Using a random initial condition x0 violates the constraints! The constraints are fulfilled when g(x)  0.","category":"page"},{"location":"network_dynamics/","page":"NetworkDynamics.jl Example","title":"NetworkDynamics.jl Example","text":"x0_plastic = rand(106)\ng_nd = constraint_equations(kuramoto_plastic!)\nsum(g_nd(x0_plastic))","category":"page"},{"location":"network_dynamics/","page":"NetworkDynamics.jl Example","title":"NetworkDynamics.jl Example","text":"We use zeros as the initial conditions for the ambient forcing algo and access the constraint equation g:","category":"page"},{"location":"network_dynamics/","page":"NetworkDynamics.jl Example","title":"NetworkDynamics.jl Example","text":"x0_plastic = zeros(106)\ng_nd = constraint_equations(kuramoto_plastic!)\ng_nd(x0_plastic)","category":"page"},{"location":"network_dynamics/","page":"NetworkDynamics.jl Example","title":"NetworkDynamics.jl Example","text":"This point fulfills the constraints and we can use it as the initial condition for Ambient Forcing.","category":"page"},{"location":"network_dynamics/","page":"NetworkDynamics.jl Example","title":"NetworkDynamics.jl Example","text":"","category":"page"},{"location":"network_dynamics/","page":"NetworkDynamics.jl Example","title":"NetworkDynamics.jl Example","text":"We start by perturbing all variables at once:","category":"page"},{"location":"network_dynamics/","page":"NetworkDynamics.jl Example","title":"NetworkDynamics.jl Example","text":"Frand = random_force(kuramoto_plastic!, [0.0, 1.0], Uniform)\nafoprob = ambient_forcing_problem(kuramoto_plastic!, x0_plastic, 2.0, Frand)\nz_new = ambient_forcing(afoprob, x0_plastic, 2.0, Frand)","category":"page"},{"location":"network_dynamics/","page":"NetworkDynamics.jl Example","title":"NetworkDynamics.jl Example","text":"As we can see the constraints are not violated!","category":"page"},{"location":"network_dynamics/","page":"NetworkDynamics.jl Example","title":"NetworkDynamics.jl Example","text":"sum(g_nd(z_new))","category":"page"},{"location":"network_dynamics/","page":"NetworkDynamics.jl Example","title":"NetworkDynamics.jl Example","text":"","category":"page"},{"location":"network_dynamics/","page":"NetworkDynamics.jl Example","title":"NetworkDynamics.jl Example","text":"Now we only perturb the variables e_22 and de_22","category":"page"},{"location":"network_dynamics/","page":"NetworkDynamics.jl Example","title":"NetworkDynamics.jl Example","text":"idx = idx_exclusive(kuramoto_plastic!, [\"e_22\", \"de_22\"])\nFrand = random_force(kuramoto_plastic!, [0.0, 1.0], Uniform, idx)\nz_new = ambient_forcing(afoprob, x0_plastic, 2.0, Frand)","category":"page"},{"location":"network_dynamics/","page":"NetworkDynamics.jl Example","title":"NetworkDynamics.jl Example","text":"We can see that the constraints are fulfilled!","category":"page"},{"location":"network_dynamics/","page":"NetworkDynamics.jl Example","title":"NetworkDynamics.jl Example","text":"sum(g_nd(z_new))","category":"page"},{"location":"#AmbientForcing","page":"Ambient Forcing Docs","title":"AmbientForcing","text":"","category":"section"},{"location":"","page":"Ambient Forcing Docs","title":"Ambient Forcing Docs","text":"A package that can calculate valid initial conditions for differential-algebraic equations (DAEs) in mass matrix form. The solutions of DAEs lie on constraint manifolds and not every state is valid anymore. Using the ambient forcing algorithm it is possible to calculate new valid states on the manifold. It can especially be useful when one wants to perturb single variables of a system. ","category":"page"},{"location":"","page":"Ambient Forcing Docs","title":"Ambient Forcing Docs","text":"This is, for example, needed when one wants to calculate the Single Node Basin of a power grid with loads. The package can be used with any ODEFunction in mass matrix form but it is especially useful in combination with NetworkDynamics.jl or PowerDynamics.jl.","category":"page"},{"location":"","page":"Ambient Forcing Docs","title":"Ambient Forcing Docs","text":"The paper which explains Ambient Forcing in depth is accessible under the DOI.","category":"page"},{"location":"","page":"Ambient Forcing Docs","title":"Ambient Forcing Docs","text":"AmbientForcing.jl is not fully published yet. In order to use it you have to manually add it from GitHub!","category":"page"},{"location":"","page":"Ambient Forcing Docs","title":"Ambient Forcing Docs","text":"julia> ] add \"https://github.com/PIK-ICoNe/AmbientForcing.jl\"","category":"page"},{"location":"diffeq/","page":"DifferentialEquations.jl Example","title":"DifferentialEquations.jl Example","text":"#DifferentialEquations.jl Example","category":"page"},{"location":"diffeq/","page":"DifferentialEquations.jl Example","title":"DifferentialEquations.jl Example","text":"This example shows the basic usage of the AmbientForcing and DifferentialEquation.jl. We adopt the Robertson Example from the DifferentialEquation Docs.","category":"page"},{"location":"diffeq/","page":"DifferentialEquations.jl Example","title":"DifferentialEquations.jl Example","text":"We begin by load all necessary deps:","category":"page"},{"location":"diffeq/","page":"DifferentialEquations.jl Example","title":"DifferentialEquations.jl Example","text":"using AmbientForcing, Distributions, OrdinaryDiffEq","category":"page"},{"location":"diffeq/","page":"DifferentialEquations.jl Example","title":"DifferentialEquations.jl Example","text":"Then we define our differential equation:","category":"page"},{"location":"diffeq/","page":"DifferentialEquations.jl Example","title":"DifferentialEquations.jl Example","text":"function rober(du, u, p, t)\n    y₁, y₂, y₃ = u\n    du[1] = -0.04 * y₁ + 1e4 * y₂ * y₃\n    du[2] = 0.04 * y₁ - 1e4 * y₂ * y₃ - 3e7 * y₂^2\n    du[3] = y₁ + y₂ + y₃ - 1\n    nothing\nend","category":"page"},{"location":"diffeq/","page":"DifferentialEquations.jl Example","title":"DifferentialEquations.jl Example","text":"We create the mass matrix M, the last row depicts our constraint:","category":"page"},{"location":"diffeq/","page":"DifferentialEquations.jl Example","title":"DifferentialEquations.jl Example","text":"M = [1.0 0 0\n    0 1.0 0\n    0 0 0]","category":"page"},{"location":"diffeq/","page":"DifferentialEquations.jl Example","title":"DifferentialEquations.jl Example","text":"We set up the DAE as an ODE in mass matrix form:","category":"page"},{"location":"diffeq/","page":"DifferentialEquations.jl Example","title":"DifferentialEquations.jl Example","text":"ode_rober = ODEFunction(rober, mass_matrix=M)","category":"page"},{"location":"diffeq/","page":"DifferentialEquations.jl Example","title":"DifferentialEquations.jl Example","text":"We have to choose an initial condition which fulfills the constraints:","category":"page"},{"location":"diffeq/","page":"DifferentialEquations.jl Example","title":"DifferentialEquations.jl Example","text":"u0 = [1.0, 0.0, 0.0]\ng_rober = constraint_equations(ode_rober)\nisapprox(sum(g_rober(u0)), 0.0, atol=1e-8)","category":"page"},{"location":"diffeq/","page":"DifferentialEquations.jl Example","title":"DifferentialEquations.jl Example","text":"","category":"page"},{"location":"diffeq/","page":"DifferentialEquations.jl Example","title":"DifferentialEquations.jl Example","text":"Using Ambient Forcing we randomly perturb all variables:","category":"page"},{"location":"diffeq/","page":"DifferentialEquations.jl Example","title":"DifferentialEquations.jl Example","text":"Frand = random_force(ode_rober, [0.0, 1], Uniform)\nafoprob_rober = ambient_forcing_problem(ode_rober, u0, 2.0, Frand)\nz_new_all = ambient_forcing(afoprob_rober, Frand)\nisapprox(sum(g_rober(z_new_all)), 0.0, atol=1e-8)","category":"page"},{"location":"diffeq/","page":"DifferentialEquations.jl Example","title":"DifferentialEquations.jl Example","text":"","category":"page"},{"location":"diffeq/","page":"DifferentialEquations.jl Example","title":"DifferentialEquations.jl Example","text":"Only perturbing the second variable y_2 works as well:","category":"page"},{"location":"diffeq/","page":"DifferentialEquations.jl Example","title":"DifferentialEquations.jl Example","text":"h = [0, 1, 0]\nz_new_2 = ambient_forcing(afoprob_rober, h)\nisapprox(sum(g_rober(z_new_2)), 0.0, atol=1e-8)","category":"page"}]
}
