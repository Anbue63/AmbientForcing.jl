var documenterSearchIndex = {"docs":
[{"location":"DifferentialEquation_example.html","page":"DiffEq","title":"DiffEq","text":"EditURL = \"<unknown>/../examples/DifferentialEquation_example.jl\"","category":"page"},{"location":"DifferentialEquation_example.html","page":"DiffEq","title":"DiffEq","text":"using AmbientForcing\nusing OrdinaryDiffEq, Distributions","category":"page"},{"location":"DifferentialEquation_example.html","page":"DiffEq","title":"DiffEq","text":"Adopting the Robertson Example from the DifferentialEquation Docs https://diffeq.sciml.ai/stable/tutorials/advancedodeexample/#Handling-Mass-Matrices","category":"page"},{"location":"DifferentialEquation_example.html","page":"DiffEq","title":"DiffEq","text":"function rober(du,u,p,t)\n  y₁,y₂,y₃ = u\n  du[1] = -0.04 * y₁ + 1e4 * y₂ * y₃\n  du[2] =  0.04 * y₁ - 1e4 * y₂ * y₃ - 3e7 * y₂^2\n  du[3] =  y₁ + y₂ + y₃ - 1\n  nothing\nend","category":"page"},{"location":"DifferentialEquation_example.html","page":"DiffEq","title":"DiffEq","text":"Creating the mass matrix M The last row depicts our constraint","category":"page"},{"location":"DifferentialEquation_example.html","page":"DiffEq","title":"DiffEq","text":"M = [1. 0  0\n     0  1. 0\n     0  0  0];\nnothing #hide","category":"page"},{"location":"DifferentialEquation_example.html","page":"DiffEq","title":"DiffEq","text":"Setting up the DAE as an ODE in mass matrix form","category":"page"},{"location":"DifferentialEquation_example.html","page":"DiffEq","title":"DiffEq","text":"ode_rober = ODEFunction(rober, mass_matrix = M)","category":"page"},{"location":"DifferentialEquation_example.html","page":"DiffEq","title":"DiffEq","text":"Choosing an inital condition which fulfills the constraint","category":"page"},{"location":"DifferentialEquation_example.html","page":"DiffEq","title":"DiffEq","text":"u0 = [1.0,0.0,0.0];\nnothing #hide","category":"page"},{"location":"DifferentialEquation_example.html","page":"DiffEq","title":"DiffEq","text":"Acsessing the constraint equations g","category":"page"},{"location":"DifferentialEquation_example.html","page":"DiffEq","title":"DiffEq","text":"g_rober = constraint_equations(ode_rober)\ng_rober(u0)","category":"page"},{"location":"DifferentialEquation_example.html","page":"DiffEq","title":"DiffEq","text":"Randomly perturbing all variables","category":"page"},{"location":"DifferentialEquation_example.html","page":"DiffEq","title":"DiffEq","text":"Frand = random_force(ode_rober, [0.0,1], Uniform)\nz_new = ambient_forcing(ode_rober, u0, 2.0, Frand)","category":"page"},{"location":"DifferentialEquation_example.html","page":"DiffEq","title":"DiffEq","text":"g ≈ 0 means the constraint is fulfilled","category":"page"},{"location":"DifferentialEquation_example.html","page":"DiffEq","title":"DiffEq","text":"g_rober(z_new)","category":"page"},{"location":"DifferentialEquation_example.html","page":"DiffEq","title":"DiffEq","text":"Only perturbing the second variable y₂","category":"page"},{"location":"DifferentialEquation_example.html","page":"DiffEq","title":"DiffEq","text":"h = [0, 1 ,0]\nz_new = ambient_forcing(ode_rober, u0, 2.0, h)\n\ng_rober(z_new)","category":"page"},{"location":"DifferentialEquation_example.html","page":"DiffEq","title":"DiffEq","text":"","category":"page"},{"location":"DifferentialEquation_example.html","page":"DiffEq","title":"DiffEq","text":"This page was generated using Literate.jl.","category":"page"},{"location":"PowerDynamics_example.html","page":"PowerDynamics","title":"PowerDynamics","text":"EditURL = \"<unknown>/../examples/PowerDynamics_example.jl\"","category":"page"},{"location":"PowerDynamics_example.html","page":"PowerDynamics","title":"PowerDynamics","text":"using AmbientForcing\nusing PowerDynamics, Distributions","category":"page"},{"location":"PowerDynamics_example.html","page":"PowerDynamics","title":"PowerDynamics","text":"Lets create a small test power grid with three nodes","category":"page"},{"location":"PowerDynamics_example.html","page":"PowerDynamics","title":"PowerDynamics","text":"line_list = []\nappend!(line_list, [StaticLine(from = 1, to = 2, Y = -1im / 0.02 + 4)])\nappend!(line_list, [StaticLine(from = 1, to = 3, Y = -1im / 0.02 + 4)])","category":"page"},{"location":"PowerDynamics_example.html","page":"PowerDynamics","title":"PowerDynamics","text":"The PQAlgebraic Node is our constraint. The Power Output of node 3 is fixed.","category":"page"},{"location":"PowerDynamics_example.html","page":"PowerDynamics","title":"PowerDynamics","text":"node_list = []\nappend!(node_list, [SlackAlgebraic(U = 1, Y_n = 0)])\nappend!(node_list, [FourthOrderEq(H = 3.318, P = -0.6337, D = 0.1, Ω = 50, E_f = 0.5, T_d_dash = 0.1,  T_q_dash = 8.690,X_d_dash = 0.111,  X_q_dash = 0.103, X_d = 0.1, X_q = 0.6)])\nappend!(node_list, [PQAlgebraic(P = -0.6337, Q = 0.0)])","category":"page"},{"location":"PowerDynamics_example.html","page":"PowerDynamics","title":"PowerDynamics","text":"Using the rigth hand side as our ODEFunction","category":"page"},{"location":"PowerDynamics_example.html","page":"PowerDynamics","title":"PowerDynamics","text":"pg = PowerGrid(node_list, line_list)\nrpg = rhs(pg)","category":"page"},{"location":"PowerDynamics_example.html","page":"PowerDynamics","title":"PowerDynamics","text":"Acessing the constraint equation g of the power grid","category":"page"},{"location":"PowerDynamics_example.html","page":"PowerDynamics","title":"PowerDynamics","text":"g = constraint_equations(rpg)","category":"page"},{"location":"PowerDynamics_example.html","page":"PowerDynamics","title":"PowerDynamics","text":"The operation point is a fixed point and naturally lies on the manifold Thus it can be used as the initial condition for our differential equation","category":"page"},{"location":"PowerDynamics_example.html","page":"PowerDynamics","title":"PowerDynamics","text":"op = find_operationpoint(pg)","category":"page"},{"location":"PowerDynamics_example.html","page":"PowerDynamics","title":"PowerDynamics","text":"Lets check if g(op) ≈ 0 meaning that the constraint is fulfilled","category":"page"},{"location":"PowerDynamics_example.html","page":"PowerDynamics","title":"PowerDynamics","text":"g(op.vec)","category":"page"},{"location":"PowerDynamics_example.html","page":"PowerDynamics","title":"PowerDynamics","text":"Lets generate a random vector from the ambient space First we want to perturb all variables in the grid","category":"page"},{"location":"PowerDynamics_example.html","page":"PowerDynamics","title":"PowerDynamics","text":"Frand = random_force(rpg, [0.0,1], Uniform)","category":"page"},{"location":"PowerDynamics_example.html","page":"PowerDynamics","title":"PowerDynamics","text":"As we can see our new valid inital condition fulfills the constraints :-)","category":"page"},{"location":"PowerDynamics_example.html","page":"PowerDynamics","title":"PowerDynamics","text":"z_new = ambient_forcing(rpg, op.vec, 2.0, Frand)\ng(z_new)\n\n# Next: let's perturb just the voltage at node 2!","category":"page"},{"location":"PowerDynamics_example.html","page":"PowerDynamics","title":"PowerDynamics","text":"Getting the index of the real and imaginary part of the voltage","category":"page"},{"location":"PowerDynamics_example.html","page":"PowerDynamics","title":"PowerDynamics","text":"idx = idx_exclusive(rpg, [\"u_r_2\", \"u_i_2\"])","category":"page"},{"location":"PowerDynamics_example.html","page":"PowerDynamics","title":"PowerDynamics","text":"Now we generate a vector with only non-vanishing componants at the voltage of node 2","category":"page"},{"location":"PowerDynamics_example.html","page":"PowerDynamics","title":"PowerDynamics","text":"Frand = random_force(rpg, [0.0, 1.0], Uniform, idx)","category":"page"},{"location":"PowerDynamics_example.html","page":"PowerDynamics","title":"PowerDynamics","text":"We solve the differential equation and find that the constraint remains fulfilled!","category":"page"},{"location":"PowerDynamics_example.html","page":"PowerDynamics","title":"PowerDynamics","text":"z_new = ambient_forcing(rpg, op.vec, 2.0, Frand);\ng(z_new)","category":"page"},{"location":"PowerDynamics_example.html","page":"PowerDynamics","title":"PowerDynamics","text":"It is also possible to perturb the variable using different distributions: Typically SNBS the angle θ and ω are pertubed differently","category":"page"},{"location":"PowerDynamics_example.html","page":"PowerDynamics","title":"PowerDynamics","text":"idx = idx_exclusive(rpg, [\"u_r_2\", \"u_i_2\", \"θ_2\", \"ω_2\"])\nτ = 2.0 # the integration time","category":"page"},{"location":"PowerDynamics_example.html","page":"PowerDynamics","title":"PowerDynamics","text":"When you want to sample eg. the angle θ from a box of [0, 2π] You have to make sure to devide the distribution argument by the integration time τ","category":"page"},{"location":"PowerDynamics_example.html","page":"PowerDynamics","title":"PowerDynamics","text":"dist_vec = [[0,1], [0, 2], [0, 2π] ./τ, [-5, 5] ./τ]","category":"page"},{"location":"PowerDynamics_example.html","page":"PowerDynamics","title":"PowerDynamics","text":"Then everything works as beforehand. And we see again that we have created a valid initial condition!","category":"page"},{"location":"PowerDynamics_example.html","page":"PowerDynamics","title":"PowerDynamics","text":"Frand = Frand = random_force(rpg, dist_vec, Uniform, idx)\nz_new = ambient_forcing(rpg, op.vec, τ, Frand)\ng(z_new)","category":"page"},{"location":"PowerDynamics_example.html","page":"PowerDynamics","title":"PowerDynamics","text":"","category":"page"},{"location":"PowerDynamics_example.html","page":"PowerDynamics","title":"PowerDynamics","text":"This page was generated using Literate.jl.","category":"page"},{"location":"NetworkDynamics_example.html","page":"NetworkDynamics","title":"NetworkDynamics","text":"EditURL = \"<unknown>/../examples/NetworkDynamics_example.jl\"","category":"page"},{"location":"NetworkDynamics_example.html","page":"NetworkDynamics","title":"NetworkDynamics","text":"using AmbientForcing\nusing NetworkDynamics, Distributions\nusing LightGraphs\nusing OrdinaryDiffEq","category":"page"},{"location":"NetworkDynamics_example.html","page":"NetworkDynamics","title":"NetworkDynamics","text":"This is an example from NetworkDynamics https://github.com/PIK-ICoN/NetworkDynamics.jl/blob/master/examples/kuramoto_plasticity.jl This only works with NetworkDynamics v0.5.0 or newer The AmbientForcing part starts at line 55","category":"page"},{"location":"NetworkDynamics_example.html","page":"NetworkDynamics","title":"NetworkDynamics","text":"const N_plastic = 10 # number of nodes\nk = 4  # average degree\ng = barabasi_albert(N_plastic, k)","category":"page"},{"location":"NetworkDynamics_example.html","page":"NetworkDynamics","title":"NetworkDynamics","text":"Berner, Rico, Eckehard Schöll, and Serhiy Yanchuk.   \"Multiclusters in Networks of Adaptively Coupled Phase Oscillators.\"   SIAM Journal on Applied Dynamical Systems 18.4 (2019): 2227-2266.","category":"page"},{"location":"NetworkDynamics_example.html","page":"NetworkDynamics","title":"NetworkDynamics","text":"The coupling function is modeled by a differential algebraic equation with mass matrix 0 * de[1] = e[2] * sin(vs[1] - vd[1] + α) / N - e[1] is equivalent to e[1] = e[2] * sin(vs[1] - vd[1] + α) / N","category":"page"},{"location":"NetworkDynamics_example.html","page":"NetworkDynamics","title":"NetworkDynamics","text":"function kuramoto_plastic_edge!(de, e, v_s, v_d, p, t)\n    de[1] =  e[2] * sin(v_s[1] - v_d[1] + α) / N_plastic - e[1]\n    de[2] = - ϵ * (sin(v_s[1] - v_d[1] + β) + e[2])\n\n    nothing\nend\n\nfunction kuramoto_plastic_vertex!(dv, v, edges, p, t)\n    dv .= 0\n    for e in edges\n        dv .-= e[1]\n    end\nend","category":"page"},{"location":"NetworkDynamics_example.html","page":"NetworkDynamics","title":"NetworkDynamics","text":"Global parameters need to be const for type stability","category":"page"},{"location":"NetworkDynamics_example.html","page":"NetworkDynamics","title":"NetworkDynamics","text":"const ϵ = 0.1\nconst α = .2π\nconst β = -.95π","category":"page"},{"location":"NetworkDynamics_example.html","page":"NetworkDynamics","title":"NetworkDynamics","text":"NetworkDynamics Setup","category":"page"},{"location":"NetworkDynamics_example.html","page":"NetworkDynamics","title":"NetworkDynamics","text":"plasticvertex = ODEVertex(f! = kuramoto_plastic_vertex!, dim =1)\nmass_matrix_plasticedge = zeros(2,2)\nmass_matrix_plasticedge[2,2] = 1. # First variables is set to 0\n\nplasticedge = ODEEdge(f! = kuramoto_plastic_edge!, dim=2, sym=[:e, :de], coupling=:undirected,mass_matrix = mass_matrix_plasticedge);\nkuramoto_plastic! = network_dynamics(plasticvertex, plasticedge, g)","category":"page"},{"location":"NetworkDynamics_example.html","page":"NetworkDynamics","title":"NetworkDynamics","text":"Using a random inital condition x0 violates the constraints! The constraints are fulfilled when g(x) ≈ 0.","category":"page"},{"location":"NetworkDynamics_example.html","page":"NetworkDynamics","title":"NetworkDynamics","text":"x0_plastic = rand(106)\ng_nd = constraint_equations(kuramoto_plastic!)\nsum(g_nd(x0_plastic))","category":"page"},{"location":"NetworkDynamics_example.html","page":"NetworkDynamics","title":"NetworkDynamics","text":"Using zeros as the intial conditions for the ambient forcing algo","category":"page"},{"location":"NetworkDynamics_example.html","page":"NetworkDynamics","title":"NetworkDynamics","text":"x0_plastic = zeros(106)\ng_nd = constraint_equations(kuramoto_plastic!)\ng_nd(x0_plastic)","category":"page"},{"location":"NetworkDynamics_example.html","page":"NetworkDynamics","title":"NetworkDynamics","text":"Perturbing all variables at once","category":"page"},{"location":"NetworkDynamics_example.html","page":"NetworkDynamics","title":"NetworkDynamics","text":"Frand = random_force(kuramoto_plastic!, [0.0, 1.0], Uniform)\nz_new = ambient_forcing(kuramoto_plastic!, x0_plastic, 2.0, Frand)","category":"page"},{"location":"NetworkDynamics_example.html","page":"NetworkDynamics","title":"NetworkDynamics","text":"As we can see the constraints are not violated!","category":"page"},{"location":"NetworkDynamics_example.html","page":"NetworkDynamics","title":"NetworkDynamics","text":"sum(g_nd(z_new))","category":"page"},{"location":"NetworkDynamics_example.html","page":"NetworkDynamics","title":"NetworkDynamics","text":"Perturbing only the variables e22 and de22","category":"page"},{"location":"NetworkDynamics_example.html","page":"NetworkDynamics","title":"NetworkDynamics","text":"idx = idx_exclusive(kuramoto_plastic!, [\"e_22\", \"de_22\"])\nFrand = random_force(kuramoto_plastic!, [0.0, 1.0], Uniform, idx)\nz_new = ambient_forcing(kuramoto_plastic!, x0_plastic, 2.0, Frand)","category":"page"},{"location":"NetworkDynamics_example.html","page":"NetworkDynamics","title":"NetworkDynamics","text":"Still the constraints are fulfilled!","category":"page"},{"location":"NetworkDynamics_example.html","page":"NetworkDynamics","title":"NetworkDynamics","text":"sum(g_nd(z_new))","category":"page"},{"location":"NetworkDynamics_example.html","page":"NetworkDynamics","title":"NetworkDynamics","text":"","category":"page"},{"location":"NetworkDynamics_example.html","page":"NetworkDynamics","title":"NetworkDynamics","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#AmbientForcing.jl","page":"Home","title":"AmbientForcing.jl","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Documentation for AmbientForcing.jl","category":"page"}]
}
