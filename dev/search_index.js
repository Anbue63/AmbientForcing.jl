var documenterSearchIndex = {"docs":
[{"location":"DifferentialEquation_example.html","page":"DiffEq","title":"DiffEq","text":"EditURL = \"<unknown>/../examples/DifferentialEquation_example.jl\"","category":"page"},{"location":"DifferentialEquation_example.html","page":"DiffEq","title":"DiffEq","text":"using AmbientForcing\nusing OrdinaryDiffEq, Distributions","category":"page"},{"location":"DifferentialEquation_example.html","page":"DiffEq","title":"DiffEq","text":"adopting the Robertson Example from the DifferentialEquation docs https://diffeq.sciml.ai/stable/tutorials/advancedodeexample/#Handling-Mass-Matrices","category":"page"},{"location":"DifferentialEquation_example.html","page":"DiffEq","title":"DiffEq","text":"function rober(du,u,p,t)\n    y₁,y₂,y₃ = u\n    du[1] = -0.04 * y₁ + 1e4 * y₂ * y₃\n    du[2] =  0.04 * y₁ - 1e4 * y₂ * y₃ - 3e7 * y₂^2\n    du[3] =  y₁ + y₂ + y₃ - 1\n    nothing\n  end","category":"page"},{"location":"DifferentialEquation_example.html","page":"DiffEq","title":"DiffEq","text":"creating the mass_matrix, the last equation is our constraint","category":"page"},{"location":"DifferentialEquation_example.html","page":"DiffEq","title":"DiffEq","text":"  M = [1. 0  0\n       0  1. 0\n       0  0  0];\nnothing #hide","category":"page"},{"location":"DifferentialEquation_example.html","page":"DiffEq","title":"DiffEq","text":"Setting up the DAE as an ODE in mass matrix form","category":"page"},{"location":"DifferentialEquation_example.html","page":"DiffEq","title":"DiffEq","text":"ode_rober = ODEFunction(rober, mass_matrix = M)\nu0 = [1.0,0.0,0.0]; # an inital condition which fulfills the constraint\n\ng_rober = constraint_equations(ode_rober) # acsessing the constraint equation\ng_rober(u0)","category":"page"},{"location":"DifferentialEquation_example.html","page":"DiffEq","title":"DiffEq","text":"Randomly perturbing all varibales","category":"page"},{"location":"DifferentialEquation_example.html","page":"DiffEq","title":"DiffEq","text":"Frand = random_force(ode_rober, [0.0,1], Uniform)\nz_new = ambient_forcing(ode_rober, u0, 2.0, Frand)\ng_rober(z_new) # g_rober(z_new) ≈ 0 means the the constraint is fulfilled","category":"page"},{"location":"DifferentialEquation_example.html","page":"DiffEq","title":"DiffEq","text":"only perturbing the second variable y₂","category":"page"},{"location":"DifferentialEquation_example.html","page":"DiffEq","title":"DiffEq","text":"h = [0, 1 ,0]\nz_new = ambient_forcing(ode_rober, u0, 2.0, h)\ng_rober(z_new)","category":"page"},{"location":"DifferentialEquation_example.html","page":"DiffEq","title":"DiffEq","text":"","category":"page"},{"location":"DifferentialEquation_example.html","page":"DiffEq","title":"DiffEq","text":"This page was generated using Literate.jl.","category":"page"},{"location":"PowerDynamics_example.html","page":"PowerDynamics","title":"PowerDynamics","text":"EditURL = \"<unknown>/../examples/PowerDynamics_example.jl\"","category":"page"},{"location":"PowerDynamics_example.html","page":"PowerDynamics","title":"PowerDynamics","text":"using AmbientForcing\nusing PowerDynamics, Distributions","category":"page"},{"location":"PowerDynamics_example.html","page":"PowerDynamics","title":"PowerDynamics","text":"lets create a small test power grid with three nodes","category":"page"},{"location":"PowerDynamics_example.html","page":"PowerDynamics","title":"PowerDynamics","text":"line_list = []\nappend!(line_list, [StaticLine(from = 1, to = 2, Y = -1im / 0.02 + 4)])\nappend!(line_list, [StaticLine(from = 1, to = 3, Y = -1im / 0.02 + 4)])\n\nnode_list = []\nappend!(node_list, [SlackAlgebraic(U = 1, Y_n = 0)])\nappend!(node_list, [FourthOrderEq(H = 3.318, P = -0.6337, D = 0.1, Ω = 50, E_f = 0.5, T_d_dash = 0.1,  T_q_dash = 8.690,X_d_dash = 0.111,  X_q_dash = 0.103, X_d = 0.1, X_q = 0.6)])\nappend!(node_list, [PQAlgebraic(P = -0.6337, Q = 0.0)]) # This is our constraint\n\npg = PowerGrid(node_list, line_list)\nrpg = rhs(pg) # using the rigth hand side as our ODEFunction\n\ng = constraint_equations(rpg) # the constaint equation of the power grid","category":"page"},{"location":"PowerDynamics_example.html","page":"PowerDynamics","title":"PowerDynamics","text":"the op is a fixed point and natrully lies on the manifold it can be used as the initial condition for our differential equation","category":"page"},{"location":"PowerDynamics_example.html","page":"PowerDynamics","title":"PowerDynamics","text":"op = find_operationpoint(pg)\n\ng(op.vec) # g(op) ≈ 0, this means that the constraint is fulfilled","category":"page"},{"location":"PowerDynamics_example.html","page":"PowerDynamics","title":"PowerDynamics","text":"Lets generate a random vector from the ambient space first we want to perturb all variables in the grid","category":"page"},{"location":"PowerDynamics_example.html","page":"PowerDynamics","title":"PowerDynamics","text":"Frand = random_force(rpg, [0.0,1], Uniform)\n\nz_new = ambient_forcing(rpg, op.vec, 2.0, Frand) # Our new valid inital condition\ng(z_new) # fulfills the constraints :-)\n\n# Next: lets perturb just the voltage at node 2!","category":"page"},{"location":"PowerDynamics_example.html","page":"PowerDynamics","title":"PowerDynamics","text":"gettng the index of the real and imaginary part of the voltage","category":"page"},{"location":"PowerDynamics_example.html","page":"PowerDynamics","title":"PowerDynamics","text":"idx = idx_exclusive(rpg, [\"u_r_2\", \"u_i_2\"])","category":"page"},{"location":"PowerDynamics_example.html","page":"PowerDynamics","title":"PowerDynamics","text":"genrate a vector only with non-vanishing componats the voltage at node 2","category":"page"},{"location":"PowerDynamics_example.html","page":"PowerDynamics","title":"PowerDynamics","text":"Frand = random_force(rpg, [0.0, 1.0], Uniform, idx)\n\nz_new = ambient_forcing(rpg, op.vec, 2.0, Frand) # solve the differential equation\ng(z_new) # the constraint remains fulfilled","category":"page"},{"location":"PowerDynamics_example.html","page":"PowerDynamics","title":"PowerDynamics","text":"it is also possible to perturb the variable using different distributions: In typically SNBS the angle θ and ω are sampled from different boxes","category":"page"},{"location":"PowerDynamics_example.html","page":"PowerDynamics","title":"PowerDynamics","text":"idx = idx_exclusive(rpg, [\"u_r_2\", \"u_i_2\", \"θ_2\", \"ω_2\"])\nτ = 2.0 # the integration time","category":"page"},{"location":"PowerDynamics_example.html","page":"PowerDynamics","title":"PowerDynamics","text":"when you want to sample eg. the angle θ from a box of [0, 2π] you have to make sure to devide the distribution argument by the integration time τ","category":"page"},{"location":"PowerDynamics_example.html","page":"PowerDynamics","title":"PowerDynamics","text":"dist_vec = [[0,1], [0, 2], [0, 2π] ./τ, [-5, 5] ./τ]","category":"page"},{"location":"PowerDynamics_example.html","page":"PowerDynamics","title":"PowerDynamics","text":"then everything works as beforehand only each variable is sampled from a different box","category":"page"},{"location":"PowerDynamics_example.html","page":"PowerDynamics","title":"PowerDynamics","text":"Frand = Frand = random_force(rpg, dist_vec, Uniform, idx)\nz_new = ambient_forcing(rpg, op.vec, τ, Frand) # solve the differential equation\ng(z_new)","category":"page"},{"location":"PowerDynamics_example.html","page":"PowerDynamics","title":"PowerDynamics","text":"","category":"page"},{"location":"PowerDynamics_example.html","page":"PowerDynamics","title":"PowerDynamics","text":"This page was generated using Literate.jl.","category":"page"},{"location":"NetworkDynamics_example.html","page":"NetworkDynamics","title":"NetworkDynamics","text":"EditURL = \"<unknown>/../examples/NetworkDynamics_example.jl\"","category":"page"},{"location":"NetworkDynamics_example.html","page":"NetworkDynamics","title":"NetworkDynamics","text":"using AmbientForcing\nusing NetworkDynamics, Distributions\nusing LightGraphs\nusing OrdinaryDiffEq","category":"page"},{"location":"NetworkDynamics_example.html","page":"NetworkDynamics","title":"NetworkDynamics","text":"This is an example from NetworkDynamics https://github.com/PIK-ICoN/NetworkDynamics.jl/blob/master/examples/kuramoto_plasticity.jl This only works with NetworkDynamics v0.5.0 The AmbientForcing part starts at line 55","category":"page"},{"location":"NetworkDynamics_example.html","page":"NetworkDynamics","title":"NetworkDynamics","text":"const N_plastic = 10 # number of nodes\nk = 4  # average degree\ng = barabasi_albert(N_plastic, k)","category":"page"},{"location":"NetworkDynamics_example.html","page":"NetworkDynamics","title":"NetworkDynamics","text":"Berner, Rico, Eckehard Schöll, and Serhiy Yanchuk.   \"Multiclusters in Networks of Adaptively Coupled Phase Oscillators.\"   SIAM Journal on Applied Dynamical Systems 18.4 (2019): 2227-2266.","category":"page"},{"location":"NetworkDynamics_example.html","page":"NetworkDynamics","title":"NetworkDynamics","text":"The coupling function is modeled by a differential algebraic equation with mass matrix 0 * de[1] = e[2] * sin(vs[1] - vd[1] + α) / N - e[1] is equivalent to e[1] = e[2] * sin(vs[1] - vd[1] + α) / N","category":"page"},{"location":"NetworkDynamics_example.html","page":"NetworkDynamics","title":"NetworkDynamics","text":"function kuramoto_plastic_edge!(de, e, v_s, v_d, p, t)\n    de[1] =  e[2] * sin(v_s[1] - v_d[1] + α) / N_plastic - e[1]\n    de[2] = - ϵ * (sin(v_s[1] - v_d[1] + β) + e[2])\n\n    nothing\nend\n\nfunction kuramoto_plastic_vertex!(dv, v, edges, p, t)\n    dv .= 0\n    for e in edges\n        dv .-= e[1]\n    end\nend","category":"page"},{"location":"NetworkDynamics_example.html","page":"NetworkDynamics","title":"NetworkDynamics","text":"Global parameters need to be const for type stability","category":"page"},{"location":"NetworkDynamics_example.html","page":"NetworkDynamics","title":"NetworkDynamics","text":"const ϵ = 0.1\nconst α = .2π\nconst β = -.95π","category":"page"},{"location":"NetworkDynamics_example.html","page":"NetworkDynamics","title":"NetworkDynamics","text":"NetworkDynamics Setup","category":"page"},{"location":"NetworkDynamics_example.html","page":"NetworkDynamics","title":"NetworkDynamics","text":"plasticvertex = ODEVertex(f! = kuramoto_plastic_vertex!, dim =1)\nmass_matrix_plasticedge = zeros(2,2)\nmass_matrix_plasticedge[2,2] = 1. # First variables is set to 0\n\nplasticedge = ODEEdge(f! = kuramoto_plastic_edge!, dim=2, sym=[:e, :de], coupling=:undirected,mass_matrix = mass_matrix_plasticedge);\nkuramoto_plastic! = network_dynamics(plasticvertex, plasticedge, g)","category":"page"},{"location":"NetworkDynamics_example.html","page":"NetworkDynamics","title":"NetworkDynamics","text":"using random inital conditions violates the constraints! the constraints are fulfilled when g(x) ≈ 0.","category":"page"},{"location":"NetworkDynamics_example.html","page":"NetworkDynamics","title":"NetworkDynamics","text":"x0_plastic = rand(106)\ng_nd = constraint_equations(kuramoto_plastic!)\nsum(g_nd(x0_plastic))","category":"page"},{"location":"NetworkDynamics_example.html","page":"NetworkDynamics","title":"NetworkDynamics","text":"using zeros as the intial conditions for the ambient_forcing algo","category":"page"},{"location":"NetworkDynamics_example.html","page":"NetworkDynamics","title":"NetworkDynamics","text":"x0_plastic = zeros(106)\ng_nd = constraint_equations(kuramoto_plastic!)\ng_nd(x0_plastic)","category":"page"},{"location":"NetworkDynamics_example.html","page":"NetworkDynamics","title":"NetworkDynamics","text":"Perturbing all variables at once","category":"page"},{"location":"NetworkDynamics_example.html","page":"NetworkDynamics","title":"NetworkDynamics","text":"Frand = random_force(kuramoto_plastic!, [0.0, 1.0], Uniform)\nz_new = ambient_forcing(kuramoto_plastic!, x0_plastic, 2.0, Frand)\nsum(g_nd(z_new)) # the constraints are not violated!","category":"page"},{"location":"NetworkDynamics_example.html","page":"NetworkDynamics","title":"NetworkDynamics","text":"Perturbing only the variables e22 and de22","category":"page"},{"location":"NetworkDynamics_example.html","page":"NetworkDynamics","title":"NetworkDynamics","text":"idx = idx_exclusive(kuramoto_plastic!, [\"e_22\", \"de_22\"])\nFrand = random_force(kuramoto_plastic!, [0.0, 1.0], Uniform, idx)\nz_new = ambient_forcing(kuramoto_plastic!, x0_plastic, 2.0, Frand)\nsum(g_nd(z_new)) # still the constraints are fulfilled!","category":"page"},{"location":"NetworkDynamics_example.html","page":"NetworkDynamics","title":"NetworkDynamics","text":"","category":"page"},{"location":"NetworkDynamics_example.html","page":"NetworkDynamics","title":"NetworkDynamics","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#AmbientForcing.jl","page":"Home","title":"AmbientForcing.jl","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Documentation for AmbientForcing.jl","category":"page"}]
}
